/*
Navicat MySQL Data Transfer

Source Server         : localhost
Source Server Version : 50624
Source Host           : localhost:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50624
File Encoding         : 65001

Date: 2016-07-07 19:00:16
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `article`
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `content` varchar(6000) NOT NULL,
  `username` varchar(100) NOT NULL,
  `time` varchar(200) NOT NULL,
  `pv` tinyint(10) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('8', 'phalcon-入门篇1(基本介绍与环境搭建)', '###1.1 phalcon的优点###\r\n\r\n说到优点不得不提的就是性能卓越,号称是最快的php框架\r\n先进的思想多样的功能,phalcon给我的第一感觉就是哇功能这么强大\r\n不俗的热情phalcon在国外的热度基本不用说,并且在国内也有很多爱好者和追捧者并且建立了中文社区等等\r\n灵活搭配,phalcon并不像某些框架,你需要这样这样或者是这样这样你才能使用起来,phalcon基本松耦合的状态可以自己搭配出需要的功能\r\n###1.2 phalcon的缺点###\r\n\r\n说道缺点不得不提的就是黑盒开发,在框架内部出了问题很难基本就无解了\r\n中文资料较少,虽然官网给出了中文文档但是翻译着实不全\r\n对新手不友好学习成本高\r\n##2 phalcon对比其他框架##\r\n\r\n我们先看一下官方提供的框架性能对比图:\r\n\r\n\r\n\r\n在这里我针对于我们几个常用的框架做了一下对比Yaf(鸟哥写的C语言框架),ThinkPhp(国内运用广泛的mvc框架),PhalApi(纯API框架),phalcon\r\n分别从性能,功能,易用性,国内社区支持**(此次排名均属于个人观点提供参考)**\r\n\r\n###性能:###\r\n\r\nyaf从性能上来说是最好的他的速度最快原因是应为底层功能逼phalcon简单 差距非常小\r\n\r\nphalapi虽然是轻量级API框架但是和C底层框架也还是有一点的差距的\r\n\r\nthinkphp就不用说了\r\n\r\nYaf -> phalcon -> phalapi -> thinkphp\r\n\r\n###功能:###\r\n\r\nphalcon当之无愧排在第一\r\n\r\nphalapi应为没有View层所以在功能上并不如thinkphp\r\n\r\nyaf连DB层都需要自己采用第三方的所以功能性上面最差\r\n\r\nphalcon -> thinkphp -> phalapi -> Yaf\r\n\r\n###易用性:###\r\n\r\nphalapi是国人写的轻量级API框架针对API来说易用性最好\r\n\r\n对于国人来说thinkphp针对性非常强所以易用性排在第二\r\n\r\nyaf和phalcon基本不相上下\r\n\r\nphalapi -> thinkphp -> phalcon = Yaf\r\n\r\n###国内社区支持:###\r\n\r\n在国内社区支持上面thinkphp当值无愧\r\n\r\nphalapi虽然是新框架已经进入开源中国TOP 50 也很强给个第二名\r\n\r\nyaf虽然是鸟哥写的框架可是占有率感人所以和phalcon打平\r\n\r\nthinkphp -> phalapi -> phalcon = Yaf\r\n\r\n从上面大家不难看出phalcon还是很优秀的,但是在易用性以及文档社区支持上面,在国内环境还是比较吃亏的,这也是我这次写教程的目的\r\n\r\n##3. 环境搭建以及phalcon安装##\r\n\r\n###环境搭建###\r\n\r\n在这里还是推荐使用(我后面有些配置等都会基于以下环境)lnmp:\r\n\r\nLiunx+Nginx+php5.4以上+mysql\r\n\r\n我使用的是centos6.5\r\n\r\n有三种方式配置环境\r\n\r\n1.手动编译安装(网上资料也挺多的但是容易出一些依赖什么什么的问题,新手不推荐)\r\n\r\n2.yum或apt-get安装(yum安装无法指定目录都会装到/etc下面去不方便管理,但是要玩liunx必须要会)\r\n\r\n3.lnmp一键安装工具(推荐:但是推荐基于上面几种都尝试过,这个安装方式基于--编译安装)\r\n我推荐一个lnmp一键配置软件:\r\n\r\n官网:OneinStack – 一键PHP/JAVA安装工具:http://oneinstack.com/\r\n\r\n因为官网介绍的比较详细,在这里就不再多做说明!其余几种方式教程都比较多也不做说明!\r\n\r\n###phalcon安装###\r\n\r\n这里就不再说明windows下phalcon怎么安装了,ubuntu请自行加上 sudo\r\n\r\n通用平台下安装指定的软件包：\r\n\r\n# Ubuntu\r\nsudo apt-get install php5-dev libpcre3-dev gcc make php5-mysql\r\n\r\n# CentOS\r\nsudo yum install php-devel pcre-devel gcc make\r\n创建扩展:\r\n\r\ngit clone --depth=1 git://github.com/phalcon/cphalcon.git\r\ncd cphalcon/build\r\n./install\r\n添加扩展到你的php配置文件:\r\n\r\nextension=phalcon.so\r\n然后重启php-fpm\r\n\r\nservice php-fpm restart\r\n大家就可以看phpinfo里面看到phalcon拓展了\r\n\r\n##4. 总结##\r\n\r\n今天主要是简单的挖个坑,在之后会从基础使用一步一步的深入,到ORM使用,到思想解读一同探索,因为笔者也是在学习阶段,基本会保持在1~2周内进行更新,多谢大家的关注以及支持,那么今天就到这里了,拜拜!\r\n\r\n注:笔者能力有限有说的不对的地方希望大家能够指出,也希望多多交流!\r\n\r\nPhalcon技术交流:364520707 PhalCon中文社区:287484785  欢迎大家的加入!', 'zhang', '1467513099', '1');
INSERT INTO `article` VALUES ('9', 'phalcon-进阶篇2(拦截器)', '本教程基于phalcon2.0.9版本\r\n\r\n##前言##\r\n先在这里感谢各位phalcon技术爱好者,我们提供这样一个优秀的交流平台\r\n\r\n哈喽大家好啊!今天我们继续来说拦截器,拦截器在phalcon的文档里面称之为验证,但是我更喜欢叫做拦截器,拦截起主要是起到对于参数做验证的功能,如果你没有按照约定的规则来请求就报错,可以见得拦截器在请求中担当一个比较重要的地位,phalcon的拦截器能给我们带来什么新的惊喜呢?让我们来一探究竟把\r\n\r\n注:笔者水平有限,说的不正确的地方希望大家多多指正,一同交流技术\r\n\r\n附上:\r\n\r\n喵了个咪的博客:http://w-blog.cn\r\n\r\n教程代码库:http://git.oschina.net/wenzhenxi/Phalcon-tutorial\r\n\r\nphalcon官网地址:https://phalconphp.com\r\n\r\nphalcon中文社区:http://www.iphalcon.cn/\r\n\r\n##1. 拦截器对比##\r\n\r\n买个关子,为什么一开始来不直接说是怎么实现呢?我们先来看看另外两个框架的拦截器分别是api开发框架phalapi和go框架beego\r\n\r\nphalapi\r\n\r\n\'login\' => array(\r\n   \'username\' => array(\'name\' => \'username\', \'require\' => true),\r\n   \'password\' => array(\'name\' => \'password\', \'require\' => true, \'min\' => 6),\r\n),\r\nbeego\r\n\r\n u := User{\"man\", 40}\r\n valid := validation.Validation{}\r\n valid.Required(u.Name, \"name\")\r\n valid.MaxSize(u.Name, 15, \"nameMax\")\r\n valid.Range(u.Age, 0, 18, \"age\")\r\n\r\n if valid.HasErrors() {\r\n    for _, err := range valid.Errors {\r\n        log.Println(err.Key, err.Message)\r\n    }\r\n }\r\nphalcon\r\n\r\n$validation = new Validation();\r\n\r\n$validation->add(\'name\',new PresenceOf(array(\'message\' => \'The name is required\')));\r\n$validation->add(\'email\',new PresenceOf(array(\'message\' => \'The e-mail is required\')));\r\n$validation->add(\'email\',new Email(array(\'message\' => \'The e-mail is not valid\')));\r\n\r\n$messages = $validation->validate($_POST);\r\nif (count($messages)) {\r\n    foreach ($messages as $message) {\r\n        echo $message, \'<br>\';\r\n    }\r\n}\r\n大家对比一下这三个框架的验证机制可以看出些什么,phalapi是一体式框架把后面的参数验证封装了,看看beego和phalcon是不是很像他们都是组件式框架,如果大家喜欢也可以自己封装成phalapi一样简单\r\n\r\n##2. phalcon拦截器##\r\n\r\n回到今天正题我们来讲讲phalcon的拦截器的使用,这里我建立了一个ValidationController代码如下:\r\n\r\nuse Phalcon\\Validation;\r\nuse Phalcon\\Validation\\Validator\\Email;\r\nuse Phalcon\\Validation\\Validator\\PresenceOf;\r\n\r\n//初始化拦截器    \r\n$validation = new Validation();\r\n//定制你的拦截器规则,你需要验证的参数名比如:name,如果验证失败返回的message\r\n$validation->add(\r\n    \'name\', new PresenceOf(array(\r\n    \'message\' => \'The name is required\'\r\n)))->add(\r\n    \'email\', new PresenceOf(array(\r\n    \'message\' => \'The e-mail is required\'\r\n)))->add(\r\n    \'email\', new Email(array(\r\n    \'message\' => \'The e-mail is not valid\'\r\n)));\r\n//可以先过滤和清理请求参数\r\n$validation->setFilters(\'name\', \'trim\');\r\n$validation->setFilters(\'email\', \'trim\');\r\n//注入参数可以放get可以放post可以限制数据源\r\n$messages = $validation->validate($_REQUEST);\r\n//判断有没有验证通过\r\nif (count($messages)) {\r\n    //如果通过打印报错信息\r\n    foreach ($messages as $message) {\r\n       echo $message, \'<br>\';\r\n    }\r\n    //结束执行后面的内容不再执行\r\n    return;\r\n}\r\n我们试着访问一下http://phalcon.w-blog.cn/phalcon/Validation应为我们什么都没有会得到如下返回:\r\n\r\n\r\n\r\n如果我们带上请求参数http://phalcon.w-blog.cn/phalcon/Validation?name=fsfa&email=591235675@qq.com这个时候请求是成功的\r\n\r\n##3. 小结##\r\n\r\n今天的内容就到这里了,大家有没有学到phalcon的拦截器呢,phalcon的拦截器还可以自己继', 'zhang', '1467513133', '9');
INSERT INTO `article` VALUES ('10', 'phalcon-入门篇4(log日志和session缓存)', '说道日志大家并不陌生,log一般用来记录PHP的debug或者是一些重要的报错信息来方便我们进行分析排除隐患,那phalcon的日志处理能给我们带来怎样的惊喜呢,我们继续往下看,\r\n\r\n###1.1 基本log###\r\n\r\nlog目录我建议使用如下目录结构(比较方便定位你需要查找的那个月那天的记录):\r\n\r\n\r\n\r\n我们照旧通过命名空间引入我们需要实例化的log类\r\n\r\nuse Phalcon\\Logger\\Adapter\\File as FileAdapter;\r\n我们在加入如下语句看下情况:\r\n\r\n$logger = new FileAdapter(\"../Runtime/log/2016-2/20160203.log\");  //初始化文件地址\r\n$logger->log(\"This is a message\");                                //写入普通log\r\n$logger->log(\"This is an error\", \\Phalcon\\Logger::ERROR);         //写入error信息\r\n$logger->error(\"This is another error\");                          //于上一句同义\r\n我们可能会遇到这样的报错:(是应为文件夹不存在可以检查文件夹是否创建)\r\n\r\nfailed to open stream: No such file or directory in\r\n或许是这样的报错:(没有权限导致的(当然对windows来说不会有这种情况)Liunx赋予一下www权限就能解决了)\r\n\r\nfailed to open stream: Permission denied in\r\n当我们解决了报错正常访问了通过之后我们可以看到在20160203.log文件中有如下一段话:\r\n\r\n\r\n\r\n这里我们就已经成功的写入了log,到这里有人会问我那我到了2016年3月份了那文件又不存在了怎么办,其实我们一般会这样做,生成存放路径,然后验证路径文件夹是否存在,如果不存在就创建文件夹,这样就可以很好的避免这个问题,或者可以不去区分2016-2这个月份全部放在log中,因为.log的文件是自己生成的所以不用担心最后没的文件.\r\n\r\n###1.2 log事务###\r\n\r\n其实开始看log事务我也很莫名,在想log要事务干嘛,但是会过来结合phalcon的特点想了想就明白了,phalcon是高性能框架追求的是更快的速度,而如果每个地方执行log都要去写入到文件里面的话那么文件IO就会非常频繁,明显phalcon的开发者考虑到了这个问题.\r\n\r\n官方的例子如下\r\n\r\n// 开启事务\r\n$logger->begin();\r\n\r\n// 添加消息\r\n$logger->alert(\"This is an alert\");\r\n$logger->error(\"This is another error\");\r\n\r\n//  保存消息到文件中\r\n$logger->commit();\r\n为了测试我们试着开始事务但是不结束看看会不会记录到log文件之中.测试结果当然是没有写入log任何内容,有需要使用log的童鞋这个确实不为是一个节省资源的方法\r\n\r\n###1.3 更多灵活的配置###\r\n\r\n到这里不得不说phalcon连一个log日志能做的这样的细致,难怪phalcon会在国外能火起来,下面会简单提及一下log的其余的功能大家可以自行尝试\r\n\r\n使用多个处理程序进行日志记录(意思是日志写两份或多份)\r\n\r\n <?php\r\n\r\n use Phalcon\\Logger;\r\n use Phalcon\\Logger\\Multiple as MultipleStream;\r\n use Phalcon\\Logger\\Adapter\\File as FileAdapter;\r\n use Phalcon\\Logger\\Adapter\\Stream as StreamAdapter;\r\n \r\n $logger = new MultipleStream();\r\n \r\n $logger->push(new FileAdapter(\'test.log\'));\r\n $logger->push(new StreamAdapter(\'php://stdout\'));\r\n \r\n $logger->log(\"This is a message\");\r\n $logger->log(\"This is an error\", Logger::ERROR);\r\n $logger->error(\"This is another error\");\r\n行格式化处理(这个是可以定义)\r\n\r\n use Phalcon\\Logger\\Formatter\\Line as LineFormatter;\r\n     \r\n // 修改日志格式\r\n $formatter = new LineFormatter(\"[%date%] - [%message%]\");\r\n $logger->setFormatter($formatter);\r\n //这样配置获得log结果如下 \r\n //[Wed, 03 Feb 16 11:20:13 +0800] - [This is another error]\r\n系统log\r\n\r\n use Phalcon\\Logger\\Adapter\\Syslog as SyslogAdapter;\r\n \r\n // 基本用法\r\n $logger = new SyslogAdapter(null);\r\n \r\n // Setting ident/mode/facility 参数设置\r\n $logger = new SyslogAdapter(\r\n     \"ident-name\",\r\n     array(\r\n         \'option\'   => LOG_NDELAY,\r\n         \'facility\' => LOG_MAIL\r\n     )\r\n );\r\nFirePHP 日志记录器(FirePHP 是利用Firebug console栏输出调试信息方便程序)\r\n\r\n use Phalcon\\Logger;\r\n use Phalcon\\Logger\\Adapter\\Firephp as Firephp;\r\n \r\n $logger = new Firephp(\"\");\r\n $logger->log(\"This is a message\");\r\n $logger->log(\"This is an error\", Logger::ERROR);\r\n $logger->error(\"This is another error\");\r\n##2. session缓存##\r\n\r\n这样一个场景,用户登录了跳转到了首页,首页要显示用户的名称,这个地方你会怎么做,对第一时间我们就会想到用session,session是一个非常方便在各个控制器中传递数据的临时缓存,在phalcon也提供了session模块让我我们来体验一下把!\r\n\r\n###2.1 配置session###\r\n\r\n就和其他的配置一样session也需要在index.php中初始化代码如下\r\n\r\nuse Phalcon\\Session\\Adapter\\Files as Session;\r\n\r\n//实例化session并且开始 赋值给DI实例 方便在控制器中调用\r\n$di->setShared(\'session\', function () {\r\n    $session = new Session();\r\n    $session->start();\r\n    return $session;\r\n});\r\n###2.2 使用session###\r\n\r\n我们简单的修改一下控制器就能做简单的测试:\r\n\r\n在IndexCpmtroller.php的indexAction方法中加入:\r\n\r\n$this->session->set(\'username\', \'miao\');\r\n在IndexCpmtroller.php的testAction方法中加入:\r\n\r\necho $this->session->get(\'username\');\r\n我们先访问http://phalcon.w-blog.cn/phalcon/Index/test发现并没有什么变化\r\n\r\n在访问http://phalcon.w-blog.cn/phalcon/在紧接着访问http://phalcon.w-blog.cn/phalcon/Index/test发现已经打印出了miao\r\n\r\n还可以清除session值\r\n\r\n$this->session->remove(\"username\");\r\n当用户退出或者是整个使用结束我们还能关闭整个session:\r\n\r\n$this->session->destroy();\r\nphalcon还提供了不同应用隔离,会话袋,组件的持久数据等操作这里就不再提及,以上的session操作基本已经够用了,感兴趣的童鞋可以阅读官网文档\r\n\r\n##3. 小结##\r\n\r\n今天的教程到这里也就结束了,在这里希望大家能够在阅读每篇教程只能能够去尝试尝试,我局的只有亲身写过的代码才不会忘记,最后给大家摆个早年,祝大家猴年吉祥,新的一年工作顺利,技术都能上一个新台阶!\r\n\r\n注:笔者能力有限有说的不对的地方希望大家能够指出,也希望多多交流!\r\n\r\nPhalcon技术交流:364520707 PhalCon中文社区:287484785  欢迎大家的加入!', 'zhang', '1467513158', '0');
INSERT INTO `article` VALUES ('11', 'phalcon-入门篇9(view层基础使用)', '##1. 分层渲染##\r\n\r\n分层渲染顾名思义,就是在把不同层模版结合在一起渲染成一个整体的模版,一个很恰当的例子就是一个公司官网他的标题都是通用的,他的上面的菜单栏也是通用的,但是挡在写莫一个模块莫一个页面的时候这些公用的地方还需要重写吗,这个答案当然是不,phalcon也很巧妙的考虑到了这一点,我们来看看它的分层渲染机制是怎样的\r\n\r\n###1.1 分层渲染###\r\n\r\n按照往常的规范我们建议一个名为ViewController的控制器然后填充代码如下:\r\n\r\n<?php\r\nuse Phalcon\\Mvc\\Controller;\r\n\r\nclass ViewController extends Controller {\r\n\r\n    public function indexAction($Id) {\r\n\r\n        $this->view->Id = $Id;\r\n    }\r\n}\r\n接着我们准备我们的view层的结构:\r\n\r\n\r\n\r\n大家可以看到我们view对应的应该是view/index.phtml,那么layouts和根目录的index.phtml是干嘛的呢?先别着急我们先给这三个文件填充一下类容:\r\n\r\nview/index.phtml:\r\n\r\n<h3>这个是view控制器的index模版!</h3>\r\n\r\n<p>这里有个参数是 <?php echo $Id; ?></p>\r\nlayouts/View.phtml**(注意如果要对view模块生效必须同名)**:\r\n\r\n<h2>这个是view控制器的布局文件!</h2>\r\n\r\n<?php echo $this->getContent(); ?>\r\nindex.phtml:\r\n\r\n<html>\r\n<head>\r\n    <title>Example</title>\r\n</head>\r\n<body>\r\n\r\n<h1>这个是默认的布局文件!</h1>\r\n\r\n<?php echo $this->getContent(); ?>\r\n\r\n</body>\r\n</html>\r\n然后接着我们来运行一下看看结果如何:\r\n\r\nhttp://phalcon.w-blog.cn/phalcon/View/index/5\r\n\r\n\r\n\r\n从这个地方可以看出渲染程序先进入了index.phtml在index.phtml的代码中引入了layouts/View.phtml中的代码,然后在layouts/View.phtml中映入了我们控制器中输出了参数的代码,这样就是一个完整的分层渲染的逻辑了,大家可以好好体会一下!\r\n\r\n###1.2 使用模版###\r\n\r\n那么有人问了我要是在view模块中也同样复用其他模块的layouts咋办呢,那么在这里就有一控制渲染的已经小技巧了\r\n\r\n我们在控制器中加入如下代码:\r\n\r\npublic function initialize()\r\n{\r\n    $this->view->setTemplateAfter(\'common\');\r\n}\r\n然后在layouts文件夹下面创建common.phtml加入如下代码:\r\n\r\n<h2>这个是common控制器的布局文件!</h2>\r\n\r\n<?php echo $this->getContent(); ?>\r\n然后我们在运行\r\n\r\nhttp://phalcon.w-blog.cn/phalcon/View/index/5\r\n\r\n\r\n\r\n我们会发现不仅仅调用了layouts中的view.phtml而且也使用了common.phtml\r\n\r\n$this->view->setTemplateBefore(‘common’)和$this->view->setTemplateAfter(‘common’)可以控制渲染顺序\r\n\r\n##2. 选择视图##\r\n\r\n当我们在做很多项目的时候往往很多页面是复用的,虽然我们制定了很多不同的Action但是要怎么通用一个模版呢,phalcon咋这里提供了一个模版选择的功能,你可以选择渲染制定的一个模版\r\n\r\n方法如下:\r\n\r\npublic function indexAction($Id) {\r\n    $this->view->pick(\"Index/index\");\r\n    $this->view->Id = $Id;\r\n}\r\n这个时候制定了pick之后我们在此请求的内容就变成如下结果了:\r\n\r\n\r\n\r\n##3. 小结##\r\n\r\n应为小编并不是特别擅长view层的使用,所以还有部分小班觉得不是太重要的类容并没有涉及到,有兴趣的同学可以参考官方文档,那么今天的教程就到这里的多谢大家的关注!\r\n\r\n注:笔者能力有限有说的不对的地方希望大家能够指出,也希望多多交流!\r\n\r\nPhalcon技术交流:364520707 PhalCon中文社区:287484785  欢迎大家的加入!', 'zhang', '1467513192', '3');
INSERT INTO `article` VALUES ('12', '门篇8(Model层基础使用2)', '  ##1. 更多查询方式##\r\n  在这里介绍的主要是一些查询方面的各种操作,比如大家熟知的对象方式->执行查询,条件替换等等操作,我们还是在Basemodel控制器中进行使用,我们建立一个queryAction方法以供使用:\r\n  ###1.1 连贯操作###\r\n  熟知TP或者是PhalApi的童鞋都知道里面都是采用了对象式的连贯操作:\r\n$rs = User::query()\r\n    ->where(\"name = :name:\")\r\n    ->andWhere(\"phone  = 13011111111\")\r\n    ->bind(array(\"name\" => \"phalcon\"))\r\n    ->order(\"phone\")\r\n    ->execute();\r\nforeach ($rs as $user) {\r\n    echo $user->name, \"\\n\";\r\n    echo \'</br>\';\r\n}', 'zhang', '1467519193', '2');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `passwd` varchar(200) NOT NULL,
  `email` varchar(200) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('1', 'zhang', '40bd001563085fc35165329ea1ff5c5ecbdbbeef', '191624026@qq.com');
